// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SectomSharp.Data;

#nullable disable

namespace SectomSharp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250628162808_Flattened-Columns-And-Tables")]
    partial class FlattenedColumnsAndTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SectomSharp.Data.Entities.AuditLogChannel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("AuditLogChannels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.BotLogChannel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("BotLogChannels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Case", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommandInputEmbedBuilder")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("LogMessageUrl")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<long?>("PerpetratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId", "PerpetratorId");

                    b.HasIndex("GuildId", "TargetId")
                        .HasDatabaseName("IX_Cases_GuildId_TargetId_Warn_Create")
                        .HasFilter("    \"LogType\" = 1 AND \"OperationType\" = 0");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.LevelingRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double?>("Multiplier")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Level");

                    b.ToTable("LevelingRoles");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.User", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("GuildId", "Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.WarningThreshold", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Span")
                        .HasColumnType("interval");

                    b.HasKey("GuildId", "Value");

                    b.ToTable("WarningThresholds");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.AuditLogChannel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("AuditLogChannels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.BotLogChannel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("BotLogChannels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Case", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Channel", "Channel")
                        .WithMany("Cases")
                        .HasForeignKey("ChannelId");

                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("Cases")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.User", "Perpetrator")
                        .WithMany("PerpetratorCases")
                        .HasForeignKey("GuildId", "PerpetratorId");

                    b.HasOne("SectomSharp.Data.Entities.User", "Target")
                        .WithMany("TargetCases")
                        .HasForeignKey("GuildId", "TargetId");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Perpetrator");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Channel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Guild", b =>
                {
                    b.OwnsOne("SectomSharp.Data.Entities.Configuration", "Configuration", b1 =>
                        {
                            b1.Property<long>("GuildId")
                                .HasColumnType("bigint");

                            b1.HasKey("GuildId");

                            b1.ToTable("Guilds");

                            b1.WithOwner()
                                .HasForeignKey("GuildId");

                            b1.OwnsOne("SectomSharp.Data.Entities.LevelingConfiguration", "Leveling", b2 =>
                                {
                                    b2.Property<long>("ConfigurationGuildId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("AccumulateMultipliers")
                                        .HasColumnType("boolean");

                                    b2.Property<int>("GlobalCooldown")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasDefaultValue(3);

                                    b2.Property<double>("GlobalMultiplier")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("double precision")
                                        .HasDefaultValue(1.0);

                                    b2.Property<bool>("IsDisabled")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false);

                                    b2.HasKey("ConfigurationGuildId");

                                    b2.ToTable("Guilds");

                                    b2.WithOwner()
                                        .HasForeignKey("ConfigurationGuildId");
                                });

                            b1.OwnsOne("SectomSharp.Data.Entities.WarningConfiguration", "Warning", b2 =>
                                {
                                    b2.Property<long>("ConfigurationGuildId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("IsDisabled")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false);

                                    b2.HasKey("ConfigurationGuildId");

                                    b2.ToTable("Guilds");

                                    b2.WithOwner()
                                        .HasForeignKey("ConfigurationGuildId");
                                });

                            b1.Navigation("Leveling")
                                .IsRequired();

                            b1.Navigation("Warning")
                                .IsRequired();
                        });

                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.LevelingRole", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("LevelingRoles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.User", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("Users")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.WarningThreshold", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany("WarningThresholds")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Channel", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Guild", b =>
                {
                    b.Navigation("AuditLogChannels");

                    b.Navigation("BotLogChannels");

                    b.Navigation("Cases");

                    b.Navigation("Channels");

                    b.Navigation("LevelingRoles");

                    b.Navigation("Users");

                    b.Navigation("WarningThresholds");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.User", b =>
                {
                    b.Navigation("PerpetratorCases");

                    b.Navigation("TargetCases");
                });
#pragma warning restore 612, 618
        }
    }
}
