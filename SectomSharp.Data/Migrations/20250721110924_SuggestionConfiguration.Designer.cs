// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SectomSharp.Data;

#nullable disable

namespace SectomSharp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250721110924_SuggestionConfiguration")]
    partial class SuggestionConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SectomSharp.Data.Entities.AuditLogChannel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("AuditLogChannels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.BotLogChannel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("BotLogChannels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Case", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Id")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogMessageUrl")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PerpetratorAvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("PerpetratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("TargetId")
                        .HasColumnType("bigint");

                    b.HasKey("GuildId", "Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId", "PerpetratorId");

                    b.HasIndex("GuildId", "TargetId")
                        .HasDatabaseName("IX_Cases_GuildId_TargetId_Warn_Create")
                        .HasFilter("\"LogType\" = 1 AND \"OperationType\" = 0 ");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.LevelingRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double?>("Multiplier")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("GuildId", "Id"), new[] { "Cooldown", "Multiplier" });

                    b.HasIndex("GuildId", "Level");

                    b.ToTable("LevelingRoles");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Emote")
                        .HasMaxLength(57)
                        .IsUnicode(true)
                        .HasColumnType("character varying(57)");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PanelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.HasIndex("GuildId", "PanelId", "Name")
                        .IsUnique();

                    b.ToTable("SuggestionComponents");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "Name")
                        .IsUnique();

                    b.ToTable("SuggestionPanels");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPost", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DownvoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("UpvoteCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("GuildId", "Id");

                    b.HasIndex("GuildId", "AuthorId");

                    b.ToTable("SuggestionPosts");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionVote", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SuggestionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("GuildId", "UserId", "SuggestionId");

                    b.HasIndex("GuildId", "SuggestionId", "Type");

                    b.HasIndex("GuildId", "UserId", "SuggestionId")
                        .IsUnique();

                    b.ToTable("SuggestionVotes");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.User", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("GuildId", "Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.WarningThreshold", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Span")
                        .HasColumnType("interval");

                    b.HasKey("GuildId", "Value");

                    b.ToTable("WarningThresholds");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.AuditLogChannel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.BotLogChannel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Case", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.User", "Perpetrator")
                        .WithMany()
                        .HasForeignKey("GuildId", "PerpetratorId");

                    b.HasOne("SectomSharp.Data.Entities.User", "Target")
                        .WithMany()
                        .HasForeignKey("GuildId", "TargetId");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Perpetrator");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Channel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.Guild", b =>
                {
                    b.OwnsOne("SectomSharp.Data.Entities.Configuration", "Configuration", b1 =>
                        {
                            b1.Property<long>("GuildId")
                                .HasColumnType("bigint");

                            b1.HasKey("GuildId");

                            b1.ToTable("Guilds");

                            b1.WithOwner()
                                .HasForeignKey("GuildId");

                            b1.OwnsOne("SectomSharp.Data.Entities.LevelingConfiguration", "Leveling", b2 =>
                                {
                                    b2.Property<long>("ConfigurationGuildId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("AccumulateMultipliers")
                                        .HasColumnType("boolean");

                                    b2.Property<int>("GlobalCooldown")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasDefaultValue(3);

                                    b2.Property<double>("GlobalMultiplier")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("double precision")
                                        .HasDefaultValue(1.0);

                                    b2.Property<bool>("IsDisabled")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false);

                                    b2.HasKey("ConfigurationGuildId");

                                    b2.ToTable("Guilds");

                                    b2.WithOwner()
                                        .HasForeignKey("ConfigurationGuildId");
                                });

                            b1.OwnsOne("SectomSharp.Data.Entities.SuggestionConfiguration", "Suggestion", b2 =>
                                {
                                    b2.Property<long>("ConfigurationGuildId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("IsDisabled")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false);

                                    b2.HasKey("ConfigurationGuildId");

                                    b2.ToTable("Guilds");

                                    b2.WithOwner()
                                        .HasForeignKey("ConfigurationGuildId");
                                });

                            b1.OwnsOne("SectomSharp.Data.Entities.WarningConfiguration", "Warning", b2 =>
                                {
                                    b2.Property<long>("ConfigurationGuildId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("IsDisabled")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("boolean")
                                        .HasDefaultValue(false);

                                    b2.HasKey("ConfigurationGuildId");

                                    b2.ToTable("Guilds");

                                    b2.WithOwner()
                                        .HasForeignKey("ConfigurationGuildId");
                                });

                            b1.Navigation("Leveling")
                                .IsRequired();

                            b1.Navigation("Suggestion")
                                .IsRequired();

                            b1.Navigation("Warning")
                                .IsRequired();
                        });

                    b.Navigation("Configuration")
                        .IsRequired();
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.LevelingRole", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionComponent", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.SuggestionPanel", "Panel")
                        .WithMany("Components")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPanel", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPost", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("GuildId", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionVote", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.SuggestionPost", "Suggestion")
                        .WithMany("Votes")
                        .HasForeignKey("GuildId", "SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectomSharp.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("GuildId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.User", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SectomSharp.Data.Entities.UserLevel", "Level", b1 =>
                        {
                            b1.Property<long>("UserGuildId")
                                .HasColumnType("bigint");

                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<int>("CurrentXp")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0);

                            b1.Property<DateTimeOffset?>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("UserGuildId", "UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserGuildId", "UserId");
                        });

                    b.Navigation("Guild");

                    b.Navigation("Level")
                        .IsRequired();
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.WarningThreshold", b =>
                {
                    b.HasOne("SectomSharp.Data.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPanel", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("SectomSharp.Data.Entities.SuggestionPost", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
