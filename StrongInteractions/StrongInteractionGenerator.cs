using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace StrongInteractions;

[Generator]
public class StrongInteractionGenerator : IIncrementalGenerator
{
    private const string AttributeNamespace = $"{nameof(StrongInteractions)}.Attributes";

    private const string StrongButtonInteractionAttribute = nameof(StrongButtonInteractionAttribute);
    private const string StrongModalInteractionAttribute = nameof(StrongModalInteractionAttribute);
    private const string StrongSelectMenuInteractionAttribute = nameof(StrongSelectMenuInteractionAttribute);

    private const string StrongButtonInteractionAttributeFull = $"{AttributeNamespace}.{StrongButtonInteractionAttribute}";
    private const string StrongModalInteractionAttributeFull = $"{AttributeNamespace}.{StrongModalInteractionAttribute}";
    private const string StrongSelectMenuInteractionAttributeFull = $"{AttributeNamespace}.{StrongSelectMenuInteractionAttribute}";

    private const string Pattern = nameof(Pattern);

    [LanguageInjection("CSharp")] private const string AttributesSource = $$"""
                                                                            // <auto-generated />

                                                                            namespace {{AttributeNamespace}}
                                                                            {
                                                                                /// <summary>
                                                                                ///     Marks a method for which strongly-typed component id patterns
                                                                                ///     and id generation methods will be generated for button interactions.
                                                                                /// </summary>
                                                                                [System.AttributeUsage(System.AttributeTargets.Method)]
                                                                                public sealed class {{StrongButtonInteractionAttribute}} : System.Attribute
                                                                                {
                                                                                    /// <summary>
                                                                                    ///     Initializes a new instance of the <see cref="{{StrongButtonInteractionAttribute}}"/> class.
                                                                                    /// </summary>
                                                                                    public {{StrongButtonInteractionAttribute}}() { }
                                                                                }
                                                                                
                                                                                /// <summary>
                                                                                ///     Marks a method for which strongly-typed component id patterns
                                                                                ///     and id generation methods will be generated for modal interactions.
                                                                                /// </summary>
                                                                                [System.AttributeUsage(System.AttributeTargets.Method)]
                                                                                public sealed class {{StrongModalInteractionAttribute}} : System.Attribute
                                                                                {
                                                                                    /// <summary>
                                                                                    ///     Initializes a new instance of the <see cref="{{StrongModalInteractionAttribute}}"/> class.
                                                                                    /// </summary>
                                                                                    public {{StrongModalInteractionAttribute}}() { }
                                                                                }

                                                                                /// <summary>
                                                                                ///     Marks a method for which strongly-typed component id patterns
                                                                                ///     and id generation methods will be generated for select menu interactions.
                                                                                /// </summary>
                                                                                [System.AttributeUsage(System.AttributeTargets.Method)]
                                                                                public sealed class {{StrongSelectMenuInteractionAttribute}} : System.Attribute
                                                                                {
                                                                                    /// <summary>
                                                                                    ///     Initializes a new instance of the <see cref="{{StrongSelectMenuInteractionAttribute}}"/> class.
                                                                                    /// </summary>
                                                                                    public {{StrongSelectMenuInteractionAttribute}}() { }
                                                                                }
                                                                            }

                                                                            """;

    private const string GeneratedNamespace = $"{nameof(StrongInteractions)}.Generated";
    private const string StrongInteractionIds = nameof(StrongInteractionIds);
    private const string StrongInteractionIdsFull = $"{GeneratedNamespace}.{StrongInteractionIds}";

    private static readonly DiagnosticDescriptor InvalidSelectMenuSignatureDiagnostic = new(
        DiagnosticIds.InvalidSelectMenuSignature,
        "Invalid StrongSelectMenuInteraction method signature",
        "Methods marked with [StrongSelectMenuInteraction] must have a string[] as the last parameter",
        "StrongInteractions",
        DiagnosticSeverity.Error,
        true,
        "Methods decorated with [StrongSelectMenuInteraction] must have a string[] as the last parameter to properly handle select menu interaction values."
    );

    private static readonly DiagnosticDescriptor InvalidModalSignatureDiagnostic = new(
        DiagnosticIds.InvalidModalSignature,
        "Invalid StrongModalInteraction method signature",
        "Methods marked with [StrongModalInteraction] must have a class that implements the IModal interface as the last parameter",
        "StrongInteractions",
        DiagnosticSeverity.Error,
        true,
        "Methods decorated with [StrongModalInteraction] must have a class that implements the IModal interface as the last parameter to properly handle modal interactions."
    );

    private static string GetSeeTag(ISymbol symbol) => symbol.GetDocumentationCommentId() is { } commentId ? $"""<see cref="{commentId}"/>""" : symbol.Name;

    private static Stack<string> GetContainingTypeNames(INamedTypeSymbol symbol)
    {
        var names = new Stack<string>();
        ISymbol? current = symbol;

        while (current is INamedTypeSymbol type)
        {
            names.Push(type.Name);
            current = type.ContainingType;
        }

        return names;
    }

    private static string GetIndentationPrefix(int indentationLevel) => new(' ', indentationLevel * 4);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes.g.cs", SourceText.From(AttributesSource, Encoding.UTF8)));

        IncrementalValuesProvider<MethodDeclarationSyntax> methodDeclarations = context.SyntaxProvider.CreateSyntaxProvider(
                                                                                            (node, _) => node is MethodDeclarationSyntax { AttributeLists.Count: > 0 },
                                                                                            (ctx, cancellationToken) =>
                                                                                            {
                                                                                                var methodSyntax = (MethodDeclarationSyntax)ctx.Node;
                                                                                                SemanticModel semanticModel = ctx.SemanticModel;

                                                                                                foreach (AttributeSyntax attributeSyntax in
                                                                                                         methodSyntax.AttributeLists.SelectMany(attributeList
                                                                                                             => attributeList.Attributes
                                                                                                         ))
                                                                                                {
                                                                                                    if (semanticModel.GetSymbolInfo(
                                                                                                            attributeSyntax,
                                                                                                            cancellationToken
                                                                                                        )
                                                                                                       .Symbol is not IMethodSymbol attributeSymbol)
                                                                                                    {
                                                                                                        continue;
                                                                                                    }

                                                                                                    INamedTypeSymbol? attributeContainingType = attributeSymbol.ContainingType;

                                                                                                    if (attributeContainingType.ToDisplayString() is
                                                                                                        StrongButtonInteractionAttributeFull
                                                                                                     or StrongModalInteractionAttributeFull
                                                                                                     or StrongSelectMenuInteractionAttributeFull)
                                                                                                    {
                                                                                                        return methodSyntax;
                                                                                                    }
                                                                                                }

                                                                                                return null;
                                                                                            }
                                                                                        )
                                                                                       .Where(m => m is not null)!;

        IncrementalValueProvider<(Compilation Left, ImmutableArray<MethodDeclarationSyntax> Right)> compilationAndMethods =
            context.CompilationProvider.Combine(methodDeclarations.Collect());

        context.RegisterSourceOutput(
            compilationAndMethods,
            (spc, source) =>
            {
                (Compilation compilation, ImmutableArray<MethodDeclarationSyntax> methods) = source;

                if (compilation.GetTypeByMetadataName("Discord.Interactions.IModal") is not { } iModalSymbol)
                {
                    return;
                }

                if (methods.IsEmpty)
                {
                    // language=CSharp
                    const string empty = $$"""
                                           // <auto-generated />

                                           namespace {{GeneratedNamespace}}
                                           {
                                               public static partial class {{StrongInteractionIds}}
                                               {
                                                   
                                               }
                                           }
                                           """;

                    spc.AddSource($"{StrongInteractionIds}.g.cs", SourceText.From(empty, Encoding.UTF8));
                    return;
                }

                // language=CSharp
                var sb = new StringBuilder(
                    $$"""
                      // <auto-generated />

                      namespace {{GeneratedNamespace}}
                      {
                          public static partial class {{StrongInteractionIds}}
                          {
                      """
                );

                List<IGrouping<ISymbol?, MethodDeclarationSyntax>> methodsByClass = methods.GroupBy(
                                                                                                m => compilation.GetSemanticModel(m.SyntaxTree).GetDeclaredSymbol(m) is
                                                                                                    IMethodSymbol symbol
                                                                                                    ? symbol.ContainingType
                                                                                                    : null,
                                                                                                SymbolEqualityComparer.Default
                                                                                            )
                                                                                           .Where(g => g.Key is not null)
                                                                                           .ToList();

                // language=CSharp
                const string aggressiveInlining =
                    "[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]";

                foreach (MethodDeclarationSyntax method in methods)
                {
                    SemanticModel model = compilation.GetSemanticModel(method.SyntaxTree);
                    if (model.GetDeclaredSymbol(method) is not IMethodSymbol symbol)
                    {
                        continue;
                    }

                    AttributeData? attr = symbol.GetAttributes()
                                                .FirstOrDefault(a => a.AttributeClass?.ToDisplayString() is StrongButtonInteractionAttributeFull
                                                                                                         or StrongModalInteractionAttributeFull
                                                                                                         or StrongSelectMenuInteractionAttributeFull
                                                 );

                    if (attr == null)
                    {
                        continue;
                    }

                    string displayString = attr.AttributeClass!.ToDisplayString();
                    string methodName = symbol.Name;
                    ImmutableArray<IParameterSymbol> parameters = symbol.Parameters;

                    switch (displayString)
                    {
                        case StrongSelectMenuInteractionAttributeFull:
                            {
                                if (parameters.LastOrDefault() is not { Type: IArrayTypeSymbol { ElementType.SpecialType: SpecialType.System_String } })
                                {
                                    var diag = Diagnostic.Create(InvalidSelectMenuSignatureDiagnostic, symbol.Locations.FirstOrDefault() ?? method.GetLocation());

                                    spc.ReportDiagnostic(diag);
                                    continue;
                                }

                                parameters = parameters.RemoveAt(parameters.Length - 1);
                                break;
                            }

                        case StrongModalInteractionAttributeFull:
                            {
                                if (parameters.LastOrDefault() is not { Type: { TypeKind: TypeKind.Class, AllInterfaces: { Length: > 0 } interfaces } }
                                 || !interfaces.Contains(iModalSymbol, SymbolEqualityComparer.Default))
                                {
                                    var diag = Diagnostic.Create(InvalidModalSignatureDiagnostic, symbol.Locations.FirstOrDefault() ?? method.GetLocation());

                                    spc.ReportDiagnostic(diag);
                                    continue;
                                }

                                parameters = parameters.RemoveAt(parameters.Length - 1);
                                break;
                            }
                    }

                    string paramList = String.Join(", ", parameters.Select(p => $"{p.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} {p.Name}"));
                    string interpolatedParts = String.Concat(parameters.Select(p => $"_{{{p.Name}}}"));
                    string patternWildcards = String.Concat(Enumerable.Repeat("_*", parameters.Length));

                    string seeTag = GetSeeTag(symbol);

                    // language=CSharp
                    sb.AppendLine(
                        $$"""

                                  /// <summary>
                                  ///     Generated regex pattern that matches the {{seeTag}} component interaction. 
                                  /// </summary>
                                  public const string {{methodName}}{{Pattern}} = "{{methodName}}{{patternWildcards}}";
                                  
                                  /// <summary>
                                  ///     Generates a component id that matches the {{seeTag}} component interaction.
                                  /// </summary>
                                  {{aggressiveInlining}}
                                  public static string {{methodName}}({{paramList}})
                                  {
                                      return $"{{methodName}}{{interpolatedParts}}";
                                  }
                          """
                    );
                }

                // language=CSharp
                sb.AppendLine(
                    """
                        }
                    }
                    """
                );

                foreach (IGrouping<ISymbol?, MethodDeclarationSyntax> grouping in methodsByClass)
                {
                    if (grouping.Key is not INamedTypeSymbol classType)
                    {
                        continue;
                    }

                    string namespaceName = classType.ContainingNamespace.ToDisplayString();
                    Stack<string> typeNames = GetContainingTypeNames(classType);

                    // language=CSharp
                    sb.AppendLine(
                        $$"""

                          namespace {{namespaceName}}
                          {
                          """
                    );

                    int indentLevel = 1;
                    foreach (string typeName in typeNames)
                    {
                        string indent = GetIndentationPrefix(indentLevel++);

                        // language=CSharp
                        sb.AppendLine(
                            $$"""
                              {{indent}}public partial class {{typeName}}
                              {{indent}}{
                              """
                        );
                    }

                    foreach (MethodDeclarationSyntax method in grouping)
                    {
                        SemanticModel model = compilation.GetSemanticModel(method.SyntaxTree);
                        if (model.GetDeclaredSymbol(method) is not IMethodSymbol symbol)
                        {
                            continue;
                        }

                        AttributeData? attr = symbol.GetAttributes()
                                                    .FirstOrDefault(a => a.AttributeClass?.ToDisplayString() is StrongButtonInteractionAttributeFull
                                                                                                             or StrongModalInteractionAttributeFull
                                                                                                             or StrongSelectMenuInteractionAttributeFull
                                                     );

                        if (attr == null)
                        {
                            continue;
                        }

                        ImmutableArray<IParameterSymbol> parameters = symbol.Parameters;
                        string paramList = String.Join(", ", parameters.Select(p => $"{p.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} {p.Name}"));
                        string paramNames = String.Join(", ", parameters.Select(p => p.Name));

                        ITypeSymbol returnType = symbol.ReturnType;

                        string methodName = symbol.Name;
                        string returnTypeString;
                        string invocation;
                        if (returnType.SpecialType is SpecialType.System_Void)
                        {
                            returnTypeString = "void";
                            invocation = $"this.{methodName}({paramNames});";
                        }
                        else
                        {
                            returnTypeString = returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                            invocation = $"return this.{methodName}({paramNames});";
                        }

                        string interactionAttribute = attr.AttributeClass?.ToDisplayString() is StrongModalInteractionAttributeFull ? "ModalInteraction" : "ComponentInteraction";
                        string indent = GetIndentationPrefix(indentLevel);

                        // language=CSharp
                        sb.AppendLine(
                            $$"""
                              {{indent}}/// <summary>
                              {{indent}}///     Generated interaction handler forwarding to {{GetSeeTag(symbol)}}.
                              {{indent}}/// </summary>
                              {{indent}}{{aggressiveInlining}}
                              {{indent}}[global::Discord.Interactions.{{interactionAttribute}}(global::{{StrongInteractionIdsFull}}.{{methodName}}{{Pattern}}, true)]
                              {{indent}}public {{returnTypeString}} Handle{{methodName}}({{paramList}})
                              {{indent}}{
                              {{indent}}    {{invocation}}
                              {{indent}}}
                              """
                        );
                    }

                    for (int i = indentLevel - 1; i >= 1; i--)
                    {
                        sb.AppendLine(new string(' ', i * 4) + "}");
                    }

                    sb.AppendLine("}");
                }

                spc.AddSource($"{StrongInteractionIds}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            }
        );
    }
}
